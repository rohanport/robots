# Docker Compose file for robots mono-repo
#
# Usage:
#
# To build the images:
#   docker compose build
#
# To start up a specific service by name:
#   docker compose up <service_name>
#
# To open an interactive shell to a running container:
#   docker exec -it <container_name> bash

services:
  pub-sub:
    image: robots:pub-sub
    build:
      context: .
      dockerfile: docker/pub-sub/Dockerfile
      target: pub-sub
    # Interactive shell
    stdin_open: true
    tty: true
    network_mode: host
    ipc: host
    volumes:
      # Mount the source code
      - ./pub-sub:/pub-sub:rw
    user: bun
    command: bun run start-dev

  pub-sub-dev:
    image: robots:pub-sub-dev
    extends: pub-sub
    command: sleep infinity

  # ROS Base image
  ros-base:
    image: robots:ros-base
    build:
      context: .
      dockerfile: docker/ros/Dockerfile
      args:
        - ROS_DISTRO=iron
        - GAZEBO_DISTRO=fortress
      target: base
    # Interactive shell
    stdin_open: true
    tty: true
    network_mode: host
    ipc: host
    # Needed to display graphical applications
    privileged: True
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority

  # ROS Overlay image containing the source code.
  ros-overlay:
    extends: ros-base
    image: robots:ros-overlay
    build:
      context: .
      dockerfile: docker/ros/Dockerfile
      target: overlay
    command: sleep infinity

  # ROS Developer container
  ros-dev:
    extends: ros-overlay
    image: robots:ros-dev
    build:
      context: .
      dockerfile: docker/ros/Dockerfile
      target: dev
      args:
        - UID=${UID:-1000}
        - GID=${UID:-1000}
        - USERNAME=${USERNAME:-devuser}
    volumes:
      # Mount the source code
      - ./ros/custom_messages:/overlay_ws/src/custom_messages:rw
      - ./ros/pathfinder:/overlay_ws/src/pathfinder:rw
      - ./ros/wheely:/overlay_ws/src/wheely:rw
      # Mount colcon build artifacts for faster rebuilds
      - ./.colcon/build/:/overlay_ws/build/:rw
      - ./.colcon/install/:/overlay_ws/install/:rw
      - ./.colcon/log/:/overlay_ws/log/:rw
    user: ${USERNAME:-devuser}
    command: sleep infinity

  # RxInfer image
  rxinfer:
    image: robots:rxinfer
    build:
      context: .
      dockerfile: docker/rxinfer/Dockerfile
      target: rxinfer
      args:
        - UID=${UID:-1000}
        - GID=${UID:-1000}
        - USERNAME=${USERNAME:-rxinfer}
    volumes:
      # Mount the source code
      - ./rxinfer:/rxinfer:rw
    user: ${USERNAME:-rxinfer}
    # Interactive shell
    stdin_open: true
    tty: true
    network_mode: host
    ipc: host
    command: sleep infinity

  # RxInfer Developer container
  rxinfer-pathfinder:
    extends: rxinfer
    image: robots:rxinfer-pathfinder
    command: julia pathfinder/main.jl
    network_mode: host
    environment:
      PUB_SUB_URL: ws://127.0.0.1:3000

  # RxInfer Developer container
  rxinfer-wheely:
    extends: rxinfer
    image: robots:rxinfer-wheely
    command: julia wheely/main.jl
    network_mode: host
    environment:
      PUB_SUB_URL: ws://127.0.0.1:3000

  dashboard:
    image: robots:dashboard
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
      target: dashboard
    # Interactive shell
    stdin_open: true
    tty: true
    network_mode: host
    ipc: host
    volumes:
      # Mount the source code
      - ./dashboard:/dashboard:rw
    user: bun
    command: bun run --bun dev
    environment:
      NEXT_PUBLIC_PUB_SUB_URL: ws://127.0.0.1:3000

  dashboard-dev:
    image: robots:dashboard-dev
    extends: dashboard
    command: sleep infinity
